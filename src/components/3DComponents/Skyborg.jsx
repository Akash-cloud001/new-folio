/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 skyborg.glb 
*/

import React, { forwardRef, useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import * as THREE from 'three'
import { useFrame, useThree } from "@react-three/fiber";
const Skyborg = forwardRef((props, ref)=>{
  const { camera } = useThree();
  const group = useRef();
  const { nodes, materials, animations } = useGLTF("/skyborg.glb");
  const { actions } = useAnimations(animations, group);
  useEffect(()=>{
    actions[props.animationState].play();
    setTimeout(()=>{
      actions[props.animationState].repetitions = 1
      actions[props.animationState].clampWhenFinished = true
    }, 2000)
  },[props, actions])
  let size = new THREE.Vector3;
  useEffect(()=>{
    if (group.current) {
      const box = new THREE.Box3().setFromObject(group.current);
      let temp = box.getSize(new THREE.Vector3());
      size.set(temp.x, temp.y, temp.z) 
      // console.log('Width:', size.x, 'Height:', size.y, 'Depth:', size.z);
      
    }
  },[group])

  useFrame(()=>{
    camera.lookAt(size)
  })
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh
            name="Alpha_Joints"
            geometry={nodes.Alpha_Joints.geometry}
            material={materials.Alpha_Joints_MAT}
            skeleton={nodes.Alpha_Joints.skeleton}
          />
          <skinnedMesh
            name="Alpha_Surface"
            geometry={nodes.Alpha_Surface.geometry}
            material={materials.Alpha_Body_MAT}
            skeleton={nodes.Alpha_Surface.skeleton}
          />
        </group>
      </group>
    </group>
  );
})

useGLTF.preload("/skyborg.glb");
export default Skyborg